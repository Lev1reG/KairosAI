// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: schedules.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkScheduleConflict = `-- name: CheckScheduleConflict :one
SELECT EXISTS (
  SELECT 1 FROM schedules
  WHERE user_id = $1
    AND status = 'scheduled'
    AND (
      start_time, end_time
  ) OVERLAPS (
    $2::timestamptz, $3::timestamptz
  )
)
`

type CheckScheduleConflictParams struct {
	UserID  pgtype.UUID        `json:"user_id"`
	Column2 pgtype.Timestamptz `json:"column_2"`
	Column3 pgtype.Timestamptz `json:"column_3"`
}

func (q *Queries) CheckScheduleConflict(ctx context.Context, arg CheckScheduleConflictParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkScheduleConflict, arg.UserID, arg.Column2, arg.Column3)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedules (
  user_id, title, description, start_time, end_time, status, created_at, updated_at
)
VALUES (
  $1, $2, $3, $4, $5, DEFAULT, NOW(), NOW() 
)
RETURNING id, user_id, title, description, start_time, end_time, status, created_at, updated_at
`

type CreateScheduleParams struct {
	UserID      pgtype.UUID        `json:"user_id"`
	Title       string             `json:"title"`
	Description pgtype.Text        `json:"description"`
	StartTime   pgtype.Timestamptz `json:"start_time"`
	EndTime     pgtype.Timestamptz `json:"end_time"`
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRow(ctx, createSchedule,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.StartTime,
		arg.EndTime,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getScheduleByID = `-- name: GetScheduleByID :one
SELECT id, user_id, title, description, start_time, end_time, status, created_at, updated_at FROM schedules
WHERE id = $1 AND user_id = $2
`

type GetScheduleByIDParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetScheduleByID(ctx context.Context, arg GetScheduleByIDParams) (Schedule, error) {
	row := q.db.QueryRow(ctx, getScheduleByID, arg.ID, arg.UserID)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.StartTime,
		&i.EndTime,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSchedulesByUser = `-- name: GetSchedulesByUser :many
SELECT id, user_id, title, description, start_time, end_time, status, created_at, updated_at FROM schedules
WHERE user_id = $1
ORDER BY start_time
`

func (q *Queries) GetSchedulesByUser(ctx context.Context, userID pgtype.UUID) ([]Schedule, error) {
	rows, err := q.db.Query(ctx, getSchedulesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.StartTime,
			&i.EndTime,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
