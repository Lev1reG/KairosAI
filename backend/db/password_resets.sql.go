// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: password_resets.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPasswordResetToken = `-- name: CreatePasswordResetToken :exec
INSERT INTO password_resets (user_id, token, expires_at)
VALUES ($1, $2, NOW() + INTERVAL '15 minutes')
`

type CreatePasswordResetTokenParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Token  string      `json:"token"`
}

func (q *Queries) CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) error {
	_, err := q.db.Exec(ctx, createPasswordResetToken, arg.UserID, arg.Token)
	return err
}

const deletePasswordResetToken = `-- name: DeletePasswordResetToken :exec
DELETE FROM password_resets
WHERE user_id = $1
`

func (q *Queries) DeletePasswordResetToken(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePasswordResetToken, userID)
	return err
}

const getUserByResetToken = `-- name: GetUserByResetToken :one
SELECT user_id FROM password_resets
WHERE token = $1 AND expires_at > NOW()
`

func (q *Queries) GetUserByResetToken(ctx context.Context, token string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getUserByResetToken, token)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
