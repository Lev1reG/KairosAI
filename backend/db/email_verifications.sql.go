// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: email_verifications.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmailVerificationToken = `-- name: CreateEmailVerificationToken :exec
INSERT INTO email_verifications (user_id, token, expires_at)
VALUES ($1, $2, NOW() + INTERVAL '15 minutes')
`

type CreateEmailVerificationTokenParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Token  string      `json:"token"`
}

func (q *Queries) CreateEmailVerificationToken(ctx context.Context, arg CreateEmailVerificationTokenParams) error {
	_, err := q.db.Exec(ctx, createEmailVerificationToken, arg.UserID, arg.Token)
	return err
}

const deleteEmailVerificationToken = `-- name: DeleteEmailVerificationToken :exec
DELETE FROM email_verifications
WHERE user_id = $1
`

func (q *Queries) DeleteEmailVerificationToken(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteEmailVerificationToken, userID)
	return err
}

const getUserByVerificationToken = `-- name: GetUserByVerificationToken :one
SELECT user_id FROM email_verifications
WHERE token = $1 AND expires_at > NOW()
`

func (q *Queries) GetUserByVerificationToken(ctx context.Context, token string) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getUserByVerificationToken, token)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
